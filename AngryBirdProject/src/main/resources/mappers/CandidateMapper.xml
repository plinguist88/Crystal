<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CandidateMapper">
<cache />
	<!-- 여기저기서 편하게 쓰려고 -->
	<sql id="basecolumn1">
		participant_num, participant_name, participant_birth, participant_gender, participant_phone, 
		participant_addr, participant_date, audition_seq, original_file_name, store_file_name, file_size, total_score
	</sql>
	
	<sql id="basecolumn2">
		participant_num, participant_name, participant_birth, participant_gender, participant_phone, 
		participant_addr, participant_date, audition_seq, original_file_name, store_file_name, file_size,
		video_score, dance_diff_score, dance_rythm_score, dance_stage_score, song_choice_score,
		song_pitch_score, song_vib_score, appearance_score, strength_score, global_score, total_score, 
		employee_num
	</sql>

	
		<!-- select할 때 쓰는 문구 -->
	<resultMap type="Model.DTO.CandidateDTO" id="baseCan">
	    <id column="participant_num" jdbcType="VARCHAR" property="candidateNum" />
		<result column="participant_name" jdbcType="VARCHAR" property="candidateName"/>
		<result column="participant_birth" jdbcType="VARCHAR" property="candidateBirth"/>
		<result column="participant_gender" jdbcType = "VARCHAR" property="candidateGender"/>
		<result column="participant_phone" jdbcType="VARCHAR" property="candidatePh"/>
		<result column="participant_addr" jdbcType="VARCHAR" property="candidateAddr"/>
		<result column="participant_date" jdbcType="TIMESTAMP" property="candidateDate"/>		
		<result column="audition_seq" jdbcType="INTEGER" property="auditionSeq"/>		
		<result column="original_file_name" jdbcType="VARCHAR" property="originalFilename"/>
		<result column="store_file_name" jdbcType="VARCHAR" property="storeFilename"/>
		<result column="file_size" jdbcType="INTEGER" property="fileSize"/>
		<result column="video_score" jdbcType="VARCHAR" property="videoScore"/>
		<result column="dance_diff_score" jdbcType="VARCHAR" property="danceDiffScore"/>
		<result column="dance_rythm_score" jdbcType="VARCHAR" property="danceRythmScore"/>
		<result column="dance_stage_score" jdbcType="VARCHAR" property="danceStageScore"/>
		<result column="song_choice_score" jdbcType="VARCHAR" property="songChoiceScore"/>
		<result column="song_pitch_score" jdbcType="VARCHAR" property="songPitchScore"/>
		<result column="song_vib_score" jdbcType="VARCHAR" property="songVibScore"/>
		<result column="appearance_score" jdbcType="VARCHAR" property="appScore"/>
		<result column="strength_score" jdbcType="VARCHAR" property="strengthScore"/>
		<result column="global_score" jdbcType="VARCHAR" property="globalScore"/>
		<result column="total_score" jdbcType="VARCHAR" property="totalScore"/>
		<result column="employee_num" jdbcType="VARCHAR" property="employeeNum"/>
	</resultMap>

	<insert id="registerCandidate" parameterType="Model.DTO.CandidateDTO">
		insert into PARTICIPANT( <include refid="basecolumn1" /> ) 
		values( #{candidateNum}, #{candidateName},#{candidateBirth},#{candidateGender},#{candidatePh},
				#{candidateAddr}, sysdate, #{auditionSeq}, #{originalFilename}, #{storeFilename}, #{fileSize})
	</insert>
	
	<!-- 지원자보기 -->
	<select parameterType="Model.DTO.CandidateDTO" resultMap="baseCan" id="candidateList">
		select <include refid="basecolumn1" /> 
		from participant 
		where audition_seq = #{auditionSeq}
		order by total_score desc
	</select>
	
	<!-- 지원자 상세보기 -->
	<select parameterType="Model.DTO.CandidateDTO" resultMap="baseCan" id="oneCandidate">
		select <include refid="basecolumn1" /> 
		from participant 
		where participant_num = #{candidateNum}
	</select>
	
	<!-- 지원자 평가정보 업데이트하기 -->
	<update id="candidateForEval" parameterType="Model.DTO.CandidateDTO">
		update participant
		set 
		video_score = #{videoScore}, 
		dance_diff_score = #{danceDiffScore}, 
		dance_rythm_score = #{danceRythmScore}, 
		dance_stage_score = #{danceStageScore}, 
		song_choice_score = #{songChoiceScore},
		song_pitch_score = #{songPitchScore}, 
		song_vib_score = #{songVibScore}, 
		appearance_score = #{appScore}, 
		strength_score = #{strengthScore}, 
		global_score = #{globalScore}, 
		total_score = #{totalScore}, 
		employee_num = #{employeeNum}
		where  participant_num = #{candidateNum}
	</update>
	
	
	
	
</mapper>